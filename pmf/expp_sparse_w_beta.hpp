// Code generated by Stan version 2.17.1

#include <stan/model/model_header.hpp>

namespace expp_sparse_w_beta_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "examples/bernoulli/expp_sparse_w_beta.stan");
    reader.add_event(56, 56, "end", "examples/bernoulli/expp_sparse_w_beta.stan");
    return reader;
}

class expp_sparse_w_beta_model : public prob_grad {
private:
    int U;
    int I;
    int K;
    int number_entries;
    vector<int> user_index;
    vector<int> item_index;
    vector<int> rating;
    double lambda;
    double beta_a;
    double beta_b;
    double log1;
public:
    expp_sparse_w_beta_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    expp_sparse_w_beta_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "expp_sparse_w_beta_model_namespace::expp_sparse_w_beta_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "U", "int", context__.to_vec());
            U = int(0);
            vals_i__ = context__.vals_i("U");
            pos__ = 0;
            U = vals_i__[pos__++];
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "I", "int", context__.to_vec());
            I = int(0);
            vals_i__ = context__.vals_i("I");
            pos__ = 0;
            I = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "number_entries", "int", context__.to_vec());
            number_entries = int(0);
            vals_i__ = context__.vals_i("number_entries");
            pos__ = 0;
            number_entries = vals_i__[pos__++];
            current_statement_begin__ = 7;
            validate_non_negative_index("user_index", "number_entries", number_entries);
            context__.validate_dims("data initialization", "user_index", "int", context__.to_vec(number_entries));
            validate_non_negative_index("user_index", "number_entries", number_entries);
            user_index = std::vector<int>(number_entries,int(0));
            vals_i__ = context__.vals_i("user_index");
            pos__ = 0;
            size_t user_index_limit_0__ = number_entries;
            for (size_t i_0__ = 0; i_0__ < user_index_limit_0__; ++i_0__) {
                user_index[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("item_index", "number_entries", number_entries);
            context__.validate_dims("data initialization", "item_index", "int", context__.to_vec(number_entries));
            validate_non_negative_index("item_index", "number_entries", number_entries);
            item_index = std::vector<int>(number_entries,int(0));
            vals_i__ = context__.vals_i("item_index");
            pos__ = 0;
            size_t item_index_limit_0__ = number_entries;
            for (size_t i_0__ = 0; i_0__ < item_index_limit_0__; ++i_0__) {
                item_index[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("rating", "number_entries", number_entries);
            context__.validate_dims("data initialization", "rating", "int", context__.to_vec(number_entries));
            validate_non_negative_index("rating", "number_entries", number_entries);
            rating = std::vector<int>(number_entries,int(0));
            vals_i__ = context__.vals_i("rating");
            pos__ = 0;
            size_t rating_limit_0__ = number_entries;
            for (size_t i_0__ = 0; i_0__ < rating_limit_0__; ++i_0__) {
                rating[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "lambda", "double", context__.to_vec());
            lambda = double(0);
            vals_r__ = context__.vals_r("lambda");
            pos__ = 0;
            lambda = vals_r__[pos__++];
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "beta_a", "double", context__.to_vec());
            beta_a = double(0);
            vals_r__ = context__.vals_r("beta_a");
            pos__ = 0;
            beta_a = vals_r__[pos__++];
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "beta_b", "double", context__.to_vec());
            beta_b = double(0);
            vals_r__ = context__.vals_r("beta_b");
            pos__ = 0;
            beta_b = vals_r__[pos__++];

            // validate, data variables
            current_statement_begin__ = 2;
            check_greater_or_equal(function__,"U",U,0);
            current_statement_begin__ = 3;
            check_greater_or_equal(function__,"I",I,0);
            current_statement_begin__ = 4;
            check_greater_or_equal(function__,"K",K,0);
            current_statement_begin__ = 6;
            check_greater_or_equal(function__,"number_entries",number_entries,0);
            current_statement_begin__ = 7;
            for (int k0__ = 0; k0__ < number_entries; ++k0__) {
                check_greater_or_equal(function__,"user_index[k0__]",user_index[k0__],0);
            }
            current_statement_begin__ = 8;
            for (int k0__ = 0; k0__ < number_entries; ++k0__) {
                check_greater_or_equal(function__,"item_index[k0__]",item_index[k0__],0);
            }
            current_statement_begin__ = 9;
            for (int k0__ = 0; k0__ < number_entries; ++k0__) {
                check_greater_or_equal(function__,"rating[k0__]",rating[k0__],0);
                check_less_or_equal(function__,"rating[k0__]",rating[k0__],1);
            }
            current_statement_begin__ = 11;
            check_greater_or_equal(function__,"lambda",lambda,0);
            current_statement_begin__ = 12;
            check_greater_or_equal(function__,"beta_a",beta_a,0);
            current_statement_begin__ = 13;
            check_greater_or_equal(function__,"beta_b",beta_b,0);
            // initialize data variables
            current_statement_begin__ = 17;
            log1 = double(0);
            stan::math::fill(log1,DUMMY_VAR__);

            current_statement_begin__ = 18;
            stan::math::assign(log1, stan::math::log(1.0));

            // validate transformed data
            current_statement_begin__ = 17;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 22;
        validate_non_negative_index("theta", "U", U);
            validate_non_negative_index("theta", "K", K);
            num_params_r__ += U * K;
            current_statement_begin__ = 23;
        validate_non_negative_index("beta", "I", I);
            validate_non_negative_index("beta", "K", K);
            num_params_r__ += I * K;
            current_statement_begin__ = 24;
            validate_non_negative_index("w", "U", U);
            num_params_r__ += U;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~expp_sparse_w_beta_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("theta")))
            throw std::runtime_error("variable theta missing");
        vals_r__ = context__.vals_r("theta");
        pos__ = 0U;
        validate_non_negative_index("theta", "U", U);
        validate_non_negative_index("theta", "K", K);
        context__.validate_dims("initialization", "theta", "matrix_d", context__.to_vec(U,K));
        matrix_d theta(static_cast<Eigen::VectorXd::Index>(U),static_cast<Eigen::VectorXd::Index>(K));
        for (int j2__ = 0U; j2__ < K; ++j2__)
            for (int j1__ = 0U; j1__ < U; ++j1__)
                theta(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_lb_unconstrain(0,theta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable theta: ") + e.what());
        }

        if (!(context__.contains_r("beta")))
            throw std::runtime_error("variable beta missing");
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "I", I);
        validate_non_negative_index("beta", "K", K);
        context__.validate_dims("initialization", "beta", "matrix_d", context__.to_vec(I,K));
        matrix_d beta(static_cast<Eigen::VectorXd::Index>(I),static_cast<Eigen::VectorXd::Index>(K));
        for (int j2__ = 0U; j2__ < K; ++j2__)
            for (int j1__ = 0U; j1__ < I; ++j1__)
                beta(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_lb_unconstrain(0,beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta: ") + e.what());
        }

        if (!(context__.contains_r("w")))
            throw std::runtime_error("variable w missing");
        vals_r__ = context__.vals_r("w");
        pos__ = 0U;
        validate_non_negative_index("w", "U", U);
        context__.validate_dims("initialization", "w", "vector_d", context__.to_vec(U));
        vector_d w(static_cast<Eigen::VectorXd::Index>(U));
        for (int j1__ = 0U; j1__ < U; ++j1__)
            w(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(0,1,w);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable w: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  theta;
            (void) theta;  // dummy to suppress unused var warning
            if (jacobian__)
                theta = in__.matrix_lb_constrain(0,U,K,lp__);
            else
                theta = in__.matrix_lb_constrain(0,U,K);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.matrix_lb_constrain(0,I,K,lp__);
            else
                beta = in__.matrix_lb_constrain(0,I,K);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  w;
            (void) w;  // dummy to suppress unused var warning
            if (jacobian__)
                w = in__.vector_lub_constrain(0,1,U,lp__);
            else
                w = in__.vector_lub_constrain(0,1,U);


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body
            {
            current_statement_begin__ = 29;
            validate_non_negative_index("thetasum", "K", K);
            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  thetasum(static_cast<Eigen::VectorXd::Index>(K));
            (void) thetasum;  // dummy to suppress unused var warning

            stan::math::initialize(thetasum, DUMMY_VAR__);
            stan::math::fill(thetasum,DUMMY_VAR__);
            current_statement_begin__ = 30;
            validate_non_negative_index("betasum", "K", K);
            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  betasum(static_cast<Eigen::VectorXd::Index>(K));
            (void) betasum;  // dummy to suppress unused var warning

            stan::math::initialize(betasum, DUMMY_VAR__);
            stan::math::fill(betasum,DUMMY_VAR__);


            current_statement_begin__ = 32;
            for (int k = 1; k <= K; ++k) {

                current_statement_begin__ = 33;
                stan::math::assign(get_base1_lhs(thetasum,k,"thetasum",1), 0);
                current_statement_begin__ = 33;
                stan::math::assign(get_base1_lhs(betasum,k,"betasum",1), 0);
            }
            current_statement_begin__ = 37;
            lp_accum__.add(beta_log<propto__>(w, beta_a, beta_b));
            current_statement_begin__ = 38;
            lp_accum__.add(exponential_log<propto__>(to_vector(theta), lambda));
            current_statement_begin__ = 39;
            lp_accum__.add(exponential_log<propto__>(to_vector(beta), lambda));
            current_statement_begin__ = 42;
            for (int entry = 1; entry <= number_entries; ++entry) {

                current_statement_begin__ = 43;
                lp_accum__.add((get_base1(w,get_base1(user_index,entry,"user_index",1),"w",1) * (stan::math::log(dot_product(get_base1(theta,get_base1(user_index,entry,"user_index",1),"theta",1),get_base1(beta,get_base1(item_index,entry,"item_index",1),"beta",1))) - log1)));
            }
            current_statement_begin__ = 50;
            for (int u = 1; u <= U; ++u) {
                current_statement_begin__ = 51;
                stan::math::assign(thetasum, add(thetasum,multiply(get_base1(theta,u,"theta",1),get_base1(w,u,"w",1))));
            }
            current_statement_begin__ = 52;
            for (int i = 1; i <= I; ++i) {
                current_statement_begin__ = 53;
                stan::math::assign(betasum, add(betasum,get_base1(beta,i,"beta",1)));
            }
            current_statement_begin__ = 55;
            lp_accum__.add((-(1) * dot_product(thetasum,betasum)));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("theta");
        names__.push_back("beta");
        names__.push_back("w");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(U);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(I);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(U);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "expp_sparse_w_beta_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        matrix_d theta = in__.matrix_lb_constrain(0,U,K);
        matrix_d beta = in__.matrix_lb_constrain(0,I,K);
        vector_d w = in__.vector_lub_constrain(0,1,U);
            for (int k_1__ = 0; k_1__ < K; ++k_1__) {
                for (int k_0__ = 0; k_0__ < U; ++k_0__) {
                vars__.push_back(theta(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < K; ++k_1__) {
                for (int k_0__ = 0; k_0__ < I; ++k_0__) {
                vars__.push_back(beta(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < U; ++k_0__) {
            vars__.push_back(w[k_0__]);
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters
            if (include_tparams__) {
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "expp_sparse_w_beta_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= U; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= I; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= U; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "w" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= U; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= K; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= I; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= U; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "w" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef expp_sparse_w_beta_model_namespace::expp_sparse_w_beta_model stan_model;

